装载: base\reg.ocp

对象: 左1 (0x92)<位>
对象: 左2 (0x93)<位>
对象: 右1 (0x96)<位>
对象: 右2 (0x97)<位>
对象: 启动左电机    (0x95)<位>
对象: 启动右电机    (0x94)<位> 
对象: 左循迹传感器(0xB3)<位>
对象: 右循迹传感器 (0xB4)<位>
对象: 电机速度<双字节>
对象: 左电机变量<字节> ;速度变量
对象: 左电机速度<字节> ;左电机占空比N/20
对象: 右电机变量<字节>
对象: 右电机速度<字节> ;右电机占空比N/20
对象: 左电机停止 <位>
对象: 右电机停止 <位>
编造: 黑胶带 0
编造: 地面 1
编造: 左侧正常 左循迹传感器?=地面
编造: 右侧正常 右循迹传感器?=地面
编造: 左侧压到轨道 左循迹传感器?=黑胶带
编造: 右侧压到轨道 右循迹传感器?=黑胶带

编: 左电机向前()
左1=0
左2=1
:编。

编: 左电机向后()
左1=1
左2=0
:编。

编: 右电机向前()
右1=1
右2=0
:编。

编: 右电机向后()
右1=0
右2=1
:编。

编: 左电机停止()
启动左电机=0
:编。

编: 右电机停止()
启动右电机=0
:编。

编: 前进()
左电机速度=电机速度
右电机速度=电机速度
左电机向前()
右电机向前()
:编。

编: 后退()
左电机速度=电机速度
右电机速度=电机速度
左电机向后()  ;左电机后退
右电机向后()    ;右电机后退 
:编。

编: 右转()
左电机速度=电机速度
右电机速度=电机速度
左电机向后()
右电机向前()
:编。

编: 左转()
左电机速度=电机速度
右电机速度=电机速度
左电机向前()
右电机向后()
:编。

编: 左电机调速()
满足(左电机停止) 就
    满足(左电机变量<=左电机速度) 就
        启动左电机=1      
    否则 
        启动左电机=0
    然后
    满足(左电机变量>=20) 就
        左电机变量=0
    然后
否则   
    启动左电机=0
然后
:编。

编: 右电机调速()
满足(右电机停止) 就
    满足(右电机变量<=右电机速度) 就
        启动右电机=1      
    否则 
        启动右电机=0
    然后
    满足(右电机变量>=20) 就
        右电机变量=0
    然后
否则   
    启动右电机=0
然后
:编。

编: 初始化()
P0=0X00    
P1=0XF0    
电机速度=5
左电机变量=0
左电机速度=0
右电机变量=0
右电机速度=0
左电机停止=1
右电机停止=1
TMOD=0x01
TH0= 0xFc
TL0= 0x18
TR0= 1
ET0= 1
EA = 1     ;开总中断             
:编。

;TIMER0中断服务子函数产生PWM信号*/
中断编: 定时0() <0xb>
TH0= 0xFc
TL0= 0x18
左电机变量++
右电机变量++
左电机调速()
右电机调速()
:编。

启动: 进入() 
初始化()
满足(1) 就继续
    满足(左侧正常&右侧正常) 就 
        前进()
    然后
    满足(左侧压到轨道&右侧压到轨道) 就
        前进()
    然后
    满足(左侧压到轨道&右侧正常) 就    
        左转()
    然后
    满足(左侧正常&右侧压到轨道) 就
        右转()         
    然后
往复
:启动。
